"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invariant = exports.getClass = exports.getIncompleteClass = exports.isInteger = exports.getByteLength = exports.__PHP_Incomplete_Class = void 0;
// eslint-disable-next-line camelcase,@typescript-eslint/class-name-casing
var __PHP_Incomplete_Class = /** @class */ (function () {
    function __PHP_Incomplete_Class(name) {
        this.__PHP_Incomplete_Class_Name = name;
    }
    return __PHP_Incomplete_Class;
}());
exports.__PHP_Incomplete_Class = __PHP_Incomplete_Class;
function getByteLength(contents, options) {
    if (typeof Buffer !== 'undefined') {
        return Buffer.byteLength(contents, options.encoding);
    }
    return encodeURIComponent(contents).replace(/%[A-F\d]{2}/g, 'U').length;
}
exports.getByteLength = getByteLength;
// isInteger = is NOT a float but still a number
function isInteger(value) {
    return typeof value === 'number' && Number.parseInt(value.toString(), 10) === value;
}
exports.isInteger = isInteger;
function getIncompleteClass(name) {
    return new __PHP_Incomplete_Class(name);
}
exports.getIncompleteClass = getIncompleteClass;
function getClass(prototype) {
    function PhpClass() {
        // No Op
    }
    PhpClass.prototype = prototype;
    return PhpClass;
}
exports.getClass = getClass;
/**
 * Ensures that the given {@link value} is truthy, throws an {@link Error} otherwise.
 * @param value the value to check to be truthy.
 * @param message the message of the {@link Error} if the value is falsy.
 */
function invariant(value, message) {
    if (!value) {
        throw new Error(message);
    }
}
exports.invariant = invariant;
